if (padj) {
results <- decideTests(efit, p.value = pval)
} else {
results <- decideTests(efit,adjust.method = "none", p.value = pval)
}
}
print(summary(results))
data.rm.batch = NULL
if (padj) {
rslt = topTable(efit, coef=compList, number = Inf, sort.by = "P")
rslt$padj = rslt$adj.P.Val
rank_vector = abs(rslt$t); names(rank_vector) = rownames(rslt)
degs = rownames(rslt[rslt$padj< pval, ])
} else {
rslt = topTable(efit, coef=compList, number = Inf, sort.by = "P")
rslt$padj = rslt$P.Value
rank_vector = abs(rslt$t); names(rank_vector) = rownames(rslt)
degs = rownames(rslt[rslt$padj< pval, ])
}
return(list(table = rslt, rank_vector = rank_vector, degs = degs,
e = as.data.frame(v$E), e_batch = as.data.frame(data.rm.batch)))
DEtable = topTable(efit, coef = NULL, number = Inf, sort.by = "P")
rank_vector = abs(DEtable$t); names(rank_vector) = rownames(DEtable)
if (padj) {
DEtable$padj = DEtable$adj.P.Val
degs = rownames(DEtable[DEtable$padj < pval, ])
} else {
DEtable$padj = DEtable$P.Value
degs = rownames(DEtable[DEtable$padj < pval, ])
}
DEresult[["Overall"]] = list(table = DEtable, rank_vector = rank_vector, degs = degs,
e = as.data.frame(v$E), e_batch = as.data.frame(data.rm.batch))
write.table(DErslt2$table, file = "limma_result.txt", sep = "\t", row.names = FALSE)
return(DEresult)
}
DErslt2 = Difflimma(counts = counts, phenodata = phenoData,
logfc = 2,
complist = compList,
pval = 0.05,
padj = TRUE)
#Load libraries and data
setwd("F:\\Desktop\\NETACT\\test")
library(org.Mm.eg.db)
library(DESeq2)
library(AnnotationDbi)
library(edgeR)
library(NetAct)
library(ggplot2)
library(circlize)
library(ComplexHeatmap)
library(magrittr)
library(dplyr)
library(igraph)
library(rgl)
#library(BiocParallel)
#library(parallel)
#library(readxl)
# Step 1
# Define expression data, group, samplenames and comparing list.
files <- c("mk31.txt", "mk32.txt", "mk33.txt",
"mk41.txt", "mk42.txt", "mk43.txt")
samplenames <- c("k31", "k32", "k33", "k41", "k42", "k43")
group <- as.factor(c("k3", "k3", "k3", "k4", "k4", "k4"))
compList <- c("k4-k3")
# Construct expression matrix
Cons_exp <- function(files, group, samplenames, compList) {
x <- edgeR::readDGE(files, columns=c(1,2))
x$samples$group <- as.factor(group)
colnames(x) <- samplenames
return(x)
}
x <- Cons_exp(files, group, samplenames, compList)
phenoData <- new("AnnotatedDataFrame", data = data.frame(celltype = group))
rownames(phenoData) <- colnames(x$counts)
pre <- function(counts, groups, mouse = FALSE,
min.count = 1, min.total.count = 2, large.n = 1, min.prop = 0.1) {
#  require(edgeR)
#  Create DGEList and Filter
x <- DGEList(counts, group = groups)
#  Gene Annotations and Filter Duplicate Symbols
geneid <- rownames(counts)
if(grepl("ENS", geneid[1])) {
keytype = "ENSEMBL"
} else {
keytype = "ENTREZID"
}
if (mouse == TRUE) {
genes <- AnnotationDbi::select(org.Mm.eg.db, keys = geneid, columns = "SYMBOL", keytype = keytype)
} else {
genes <- AnnotationDbi::select(org.Hs.eg.db, keys = geneid, columns = "SYMBOL", keytype = keytype)
}
dup_id = which(duplicated(genes[keytype]))
if(length(dup_id) != 0){
genes = genes[-dup_id,]
}
filter_na <- which(is.na(genes$SYMBOL))
filter_dup <- which(duplicated(genes$SYMBOL))
filter <- unique(filter_na, filter_dup)
if(length(filter) != 0){
x$counts <- x$counts[-filter, ]
rownames(x$counts) <- genes$SYMBOL[-filter]
}
#Filter Low Expression
keep.exprs <- filterByExpr(x, group=groups,
min.count = min.count, min.total.count = min.total.count,
large.n = large.n, min.prop = min.prop)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
write.table(counts, file = "Exp_counts.txt", sep = "\t")
return(x$counts)
}
counts <- pre(counts = x$counts, groups = group, mouse = TRUE)
DiffDESeq2 = function(counts, phenodata, complist,logfc = 0, pval = 0.05, padj = TRUE ) {
phenodata = data.frame(celltype = group, row.names = samplenames)
celltype = phenodata$celltype
dds = DESeqDataSetFromMatrix(countData = counts, colData = phenodata, design = ~ celltype)
dds <- estimateSizeFactors(dds)
e <- counts(dds, normalized = TRUE)
dds = DESeq(dds)
if (padj) {
DEtable = results(dds, alpha = pval)
DEtable = data.frame(DEtable[complete.cases(DEtable), ])
DEtable = DEtable[order(DEtable$padj), ]
degs = rownames(DEtable[abs(DEtable$log2FoldChange) > logfc & DEtable$padj < pval, ])
} else {
DEtable = results(dds, alpha = pval)
DEtable = data.frame(DEtable[complete.cases(DEtable), ])
DEtable = DEtable[order(DEtable$pvalue), ]
degs = rownames(DEtable[abs(DEtable$log2FoldChange) > logfc & DEtable$pvalue < pval, ])
}
# 计算高低差异基因数目
upregulated = rownames(DEtable[DEtable$log2FoldChange > logfc & (if (padj) DEtable$padj < pval else DEtable$pvalue < pval), ])
downregulated = rownames(DEtable[DEtable$log2FoldChange < -logfc & (if (padj) DEtable$padj < pval else DEtable$pvalue < pval), ])
no_difference = rownames(DEtable[abs(DEtable$log2FoldChange) <= logfc | (if (padj) DEtable$padj >= pval else DEtable$pvalue >= pval), ])
# 输出结果
num_upregulated = length(upregulated)
num_downregulated = length(downregulated)
num_no_difference = length(no_difference)
print(paste("Down:", num_downregulated))
print(paste("NotSig:", num_no_difference))
print(paste("Up:", num_upregulated))
rank_vector = abs(DEtable$stat); names(rank_vector) = rownames(DEtable)
write.table(DErslt$table, file = "DESeq2_result.txt", sep = "\t")
return(list(table = DEtable, rank_vector = rank_vector, degs = degs, e = e,
up = upregulated, down = downregulated, nosig = no_difference))
}
DErslt = DiffDESeq2 (counts = counts, phenodata, complist = compList,
logfc = 3, pval = 0.001, padj = TRUE)
DiffDESeq2 = function(counts, phenodata, complist,logfc = 0, pval = 0.05, padj = TRUE ) {
phenodata = data.frame(celltype = group, row.names = samplenames)
celltype = phenodata$celltype
dds = DESeqDataSetFromMatrix(countData = counts, colData = phenodata, design = ~ celltype)
dds <- estimateSizeFactors(dds)
e <- counts(dds, normalized = TRUE)
dds = DESeq(dds)
if (padj) {
DEtable = results(dds, alpha = pval)
DEtable = data.frame(DEtable[complete.cases(DEtable), ])
DEtable = DEtable[order(DEtable$padj), ]
degs = rownames(DEtable[abs(DEtable$log2FoldChange) > logfc & DEtable$padj < pval, ])
} else {
DEtable = results(dds, alpha = pval)
DEtable = data.frame(DEtable[complete.cases(DEtable), ])
DEtable = DEtable[order(DEtable$pvalue), ]
degs = rownames(DEtable[abs(DEtable$log2FoldChange) > logfc & DEtable$pvalue < pval, ])
}
# 计算高低差异基因数目
upregulated = rownames(DEtable[DEtable$log2FoldChange > logfc & (if (padj) DEtable$padj < pval else DEtable$pvalue < pval), ])
downregulated = rownames(DEtable[DEtable$log2FoldChange < -logfc & (if (padj) DEtable$padj < pval else DEtable$pvalue < pval), ])
no_difference = rownames(DEtable[abs(DEtable$log2FoldChange) <= logfc | (if (padj) DEtable$padj >= pval else DEtable$pvalue >= pval), ])
# 输出结果
num_upregulated = length(upregulated)
num_downregulated = length(downregulated)
num_no_difference = length(no_difference)
print(paste("Down:", num_downregulated))
print(paste("NotSig:", num_no_difference))
print(paste("Up:", num_upregulated))
rank_vector = abs(DEtable$stat); names(rank_vector) = rownames(DEtable)
return(list(table = DEtable, rank_vector = rank_vector, degs = degs, e = e,
up = upregulated, down = downregulated, nosig = no_difference))
write.table(DErslt$table, file = "DESeq2_result.txt", sep = "\t")
}
DErslt = DiffDESeq2 (counts = counts, phenodata, complist = compList,
logfc = 3, pval = 0.001, padj = TRUE)
#DErslt$e <- as.data.frame(DErslt$e)
write.table(DErslt$table, file = "DESeq2_result.txt", sep = "\t")
Difflimma = function(counts, phenodata, complist, logfc = 1, pval = 0.05, padj = TRUE) {
#  require(edgeR)
#  require(limma)
phenodata = data.frame(celltype = group, row.names = samplenames)
celltype = phenodata$celltype
levs = levels(celltype)
dge = DGEList(counts=counts,group=celltype, genes = rownames(counts))
dge <- calcNormFactors(dge)
compList <- complist
design = model.matrix(~ 0 + celltype)
colnames(design) = levs
contr.matrix = makeContrasts(contrasts = compList, levels = design)
v <- voom(dge, design, plot = FALSE)
vfit = lmFit(v, design)
vfit = contrasts.fit(vfit, contrasts=contr.matrix)
efit = eBayes(vfit)
results = decideTests(efit, p.value = pval)
#log fold change restriction
if (!missing(logfc)) {
efit <- treat(vfit, lfc  = logfc)
if (padj) {
results <- decideTests(efit, p.value = pval)
} else {
results <- decideTests(efit,adjust.method = "none", p.value = pval)
}
}
print(summary(results))
data.rm.batch = NULL
if (padj) {
rslt = topTable(efit, coef=compList, number = Inf, sort.by = "P")
rslt$padj = rslt$adj.P.Val
rank_vector = abs(rslt$t); names(rank_vector) = rownames(rslt)
degs = rownames(rslt[rslt$padj< pval, ])
} else {
rslt = topTable(efit, coef=compList, number = Inf, sort.by = "P")
rslt$padj = rslt$P.Value
rank_vector = abs(rslt$t); names(rank_vector) = rownames(rslt)
degs = rownames(rslt[rslt$padj< pval, ])
}
return(list(table = rslt, rank_vector = rank_vector, degs = degs,
e = as.data.frame(v$E), e_batch = as.data.frame(data.rm.batch)))
DEtable = topTable(efit, coef = NULL, number = Inf, sort.by = "P")
rank_vector = abs(DEtable$t); names(rank_vector) = rownames(DEtable)
if (padj) {
DEtable$padj = DEtable$adj.P.Val
degs = rownames(DEtable[DEtable$padj < pval, ])
} else {
DEtable$padj = DEtable$P.Value
degs = rownames(DEtable[DEtable$padj < pval, ])
}
DEresult[["Overall"]] = list(table = DEtable, rank_vector = rank_vector, degs = degs,
e = as.data.frame(v$E), e_batch = as.data.frame(data.rm.batch))
return(DEresult)
}
DErslt2 = Difflimma(counts = counts, phenodata = phenoData,
logfc = 2,
complist = compList,
pval = 0.05,
padj = TRUE)
write.table(DErslt2$table, file = "limma_result.txt", sep = "\t", row.names = FALSE)
usethis::use_data_raw()
document()
rlang::last_error()
setwd
setwd("F:\\Desktop\\NETACT\\R package\\TFnetwork")
document()
document()
library(org.Hs.eg.db)
setwd("F:\\Desktop\\NETACT\\R package\\TFnetwork")
document()
devtools::document()
document()
document()
document()
document()
setwd("F:\\Desktop\\NETACT\\R package\\TFnetwork")
document()
setwd("..")
install("TFnetwork")
#test
library(TFnetwork)
?plot_tfnetwork
setwd("F:\\Desktop\\NETACT\\test")
setwd("F:\\Desktop\\NETACT\\test")
files <- c("mk31.txt", "mk32.txt", "mk33.txt",
"mk41.txt", "mk42.txt", "mk43.txt")
samplenames <- c("k31", "k32", "k33", "k41", "k42", "k43")
group <- as.factor(c("k3", "k3", "k3", "k4", "k4", "k4"))
compList <- c("k4-k3")
x <- Cons_exp(files, group, samplenames, compList)
phenoData <- new("AnnotatedDataFrame", data = data.frame(celltype = group))
rownames(phenoData) <- colnames(x$counts)
counts <- pre(counts = x$counts, groups = group, mouse = TRUE)
#Step 2
DErslt = DiffDESeq2 (counts = counts, phenodata, complist = compList,
logfc = 3, pval = 0.001, padj = TRUE)
write.table(DErslt$table, file = "DESeq2_result.txt", sep = "\t")
DErslt2 = Difflimma(counts = counts, phenodata = phenoData,
logfc = 2,
complist = compList,
pval = 0.05,
padj = TRUE)
write.table(DErslt2$table, file = "limma_result.txt", sep = "\t", row.names = FALSE)
#Step 3
data("mDB")
gsearslts <- TF_Selection_p(GSDB = mDB, DErslt = DErslt, minSize = 5, nperm = 1000,
pval = 0.05, compList = compList, method = "binary",
nameFile = "gsearslts_tutorial")
write.table(gsearslts$GSEArslt, file = "TF_GSEA.txt", sep = "\t", row.names = FALSE)
tfs <- gsearslts$tfs
tfs
tfs <- Reselect_TFs_p(GSEArslt = gsearslts$GSEArslt, pval = 0.01)
tfs
#Activity
neweset = Biobase::ExpressionSet(assayData = as.matrix(DErslt$e), phenoData = phenoData)
#计算活性，绘制热图
act.me <- TF_Activity(tfs, mDB, neweset, DErslt)
acts_mat = act.me$all_activities
#Step 2
DErslt = DiffDESeq2 (counts = counts, phenodata, complist = compList,
logfc = 3, pval = 0.001, padj = TRUE)
install("TFnetwork")
setwd("F:\\Desktop\\NETACT\\R package\\TFnetwork")
setwd("..")
install("TFnetwork")
#test
library(TFnetwork)
?plot_tfnetwork
#Step 1
setwd("F:\\Desktop\\NETACT\\test")
files <- c("mk31.txt", "mk32.txt", "mk33.txt",
"mk41.txt", "mk42.txt", "mk43.txt")
samplenames <- c("k31", "k32", "k33", "k41", "k42", "k43")
group <- as.factor(c("k3", "k3", "k3", "k4", "k4", "k4"))
compList <- c("k4-k3")
x <- Cons_exp(files, group, samplenames, compList)
phenoData <- new("AnnotatedDataFrame", data = data.frame(celltype = group))
rownames(phenoData) <- colnames(x$counts)
counts <- pre(counts = x$counts, groups = group, mouse = TRUE)
#Step 2
DErslt = DiffDESeq2 (counts = counts, phenodata, complist = compList,
logfc = 3, pval = 0.001, padj = TRUE)
write.table(DErslt$table, file = "DESeq2_result.txt", sep = "\t")
DErslt2 = Difflimma(counts = counts, phenodata = phenoData,
logfc = 2,
complist = compList,
pval = 0.05,
padj = TRUE)
write.table(DErslt2$table, file = "limma_result.txt", sep = "\t", row.names = FALSE)
#Step 3
data("mDB")
gsearslts <- TF_Selection_p(GSDB = mDB, DErslt = DErslt, minSize = 5, nperm = 1000,
pval = 0.05, compList = compList, method = "binary",
nameFile = "gsearslts_tutorial")
write.table(gsearslts$GSEArslt, file = "TF_GSEA.txt", sep = "\t", row.names = FALSE)
tfs <- gsearslts$tfs
tfs
tfs <- Reselect_TFs_p(GSEArslt = gsearslts$GSEArslt, pval = 0.01)
tfs
pdf("TF_heatmap.pdf", width = 4, height = 20)
heatmap2 <- TF_heatmap(acts_mat, neweset)
heatmap2
dev.off()
#Activity
neweset = Biobase::ExpressionSet(assayData = as.matrix(DErslt$e), phenoData = phenoData)
pdf("TF_heatmap.pdf", width = 4, height = 20)
heatmap2 <- TF_heatmap(acts_mat, neweset)
heatmap2
dev.off()
#Activity
neweset <- Biobase::ExpressionSet(assayData = as.matrix(DErslt$e), phenoData = phenoData)
pdf("TF_heatmap.pdf", width = 4, height = 20)
heatmap2 <- TF_heatmap(acts_mat, neweset)
setwd("F:\\Desktop\\NETACT\\R package\\TFnetwork")
document()
document()
document()
setwd("..")
install("TFnetwork")
#test
library(TFnetwork)
?DiffDESeq2
#Step 1
setwd("F:\\Desktop\\NETACT\\test")
files <- c("mk31.txt", "mk32.txt", "mk33.txt",
"mk41.txt", "mk42.txt", "mk43.txt")
samplenames <- c("k31", "k32", "k33", "k41", "k42", "k43")
group <- as.factor(c("k3", "k3", "k3", "k4", "k4", "k4"))
compList <- c("k4-k3")
x <- Cons_exp(files, group, samplenames, compList)
phenoData <- new("AnnotatedDataFrame", data = data.frame(celltype = group))
rownames(phenoData) <- colnames(x$counts)
counts <- pre(counts = x$counts, groups = group, mouse = TRUE)
#Step 2
DErslt = DiffDESeq2 (counts = counts, phenodata, complist = compList,
logfc = 3, pval = 0.001, padj = TRUE)
write.table(DErslt$table, file = "DESeq2_result.txt", sep = "\t")
DErslt2 = Difflimma(counts = counts, phenodata = phenoData,
logfc = 2,
complist = compList,
pval = 0.05,
padj = TRUE)
write.table(DErslt2$table, file = "limma_result.txt", sep = "\t", row.names = FALSE)
#Step 3
data("mDB")
gsearslts <- TF_Selection_p(GSDB = mDB, DErslt = DErslt, minSize = 5, nperm = 1000,
pval = 0.05, compList = compList, method = "binary",
nameFile = "gsearslts_tutorial")
write.table(gsearslts$GSEArslt, file = "TF_GSEA.txt", sep = "\t", row.names = FALSE)
tfs <- gsearslts$tfs
tfs
tfs <- Reselect_TFs_p(GSEArslt = gsearslts$GSEArslt, pval = 0.01)
tfs
#Activity
neweset <- Biobase::ExpressionSet(assayData = as.matrix(DErslt$e), phenoData = phenoData)
#计算活性，绘制热图
act.me <- TF_Activity(tfs, mDB, neweset, DErslt)
acts_mat = act.me$all_activities
#绘制热图
pdf("TF_heatmap.pdf", width = 4, height = 20)
heatmap2 <- TF_heatmap(acts_mat, neweset)
heatmap2
dev.off()
dev.off()
pdf("TF_heatmap.pdf", width = 4, height = 20)
heatmap2 <- TF_heatmap(acts_mat, neweset)
heatmap2
dev.off()
#Step 4
Cons_net(mouse = TRUE)
plot_tfnetwork(net,
pdf.name = "TFnet.pdf",
nodeshape = "circle",
#               TF_color = "red",
#              netlayout = layout_(network, with_fr(niter = 20000)),
pdf.height = 15,
pdf.width = 15,
edge.arrow.size = 0.3,
vertex.label.family = "sans")
plot_highlighted_tfnetwork(network, highlight_node = "Gli2")
plot_interactive_tfnetwork(network,
canvas.width = 500,
canvas.height = 500)
setwd("F:\\Desktop\\NETACT\\R package\\TFnetwork")
document()
setwd("..")
install("TFnetwork")
#test
library(TFnetwork)
?DiffDESeq2
setwd("F:\\Desktop\\NETACT\\test")
files <- c("mk31.txt", "mk32.txt", "mk33.txt",
"mk41.txt", "mk42.txt", "mk43.txt")
samplenames <- c("k31", "k32", "k33", "k41", "k42", "k43")
group <- as.factor(c("k3", "k3", "k3", "k4", "k4", "k4"))
compList <- c("k4-k3")
x <- Cons_exp(files, group, samplenames, compList)
phenoData <- new("AnnotatedDataFrame", data = data.frame(celltype = group))
rownames(phenoData) <- colnames(x$counts)
counts <- pre(counts = x$counts, groups = group, mouse = TRUE)
#Step 2
DErslt = DiffDESeq2 (counts = counts, phenodata, complist = compList,
logfc = 3, pval = 0.001, padj = TRUE)
write.table(DErslt$table, file = "DESeq2_result.txt", sep = "\t")
DErslt2 = Difflimma(counts = counts, phenodata = phenoData,
logfc = 2,
complist = compList,
pval = 0.05,
padj = TRUE)
write.table(DErslt2$table, file = "limma_result.txt", sep = "\t", row.names = FALSE)
#Step 3
data("mDB")
gsearslts <- TF_Selection_p(GSDB = mDB, DErslt = DErslt, minSize = 5, nperm = 1000,
pval = 0.05, compList = compList, method = "binary",
nameFile = "gsearslts_tutorial")
write.table(gsearslts$GSEArslt, file = "TF_GSEA.txt", sep = "\t", row.names = FALSE)
tfs <- gsearslts$tfs
tfs
tfs <- Reselect_TFs_p(GSEArslt = gsearslts$GSEArslt, pval = 0.01)
tfs
#Activity
neweset <- Biobase::ExpressionSet(assayData = as.matrix(DErslt$e), phenoData = phenoData)
#计算活性，绘制热图
act.me <- TF_Activity(tfs, mDB, neweset, DErslt)
acts_mat = act.me$all_activities
#绘制热图
pdf("TF_heatmap.pdf", width = 4, height = 20)
heatmap2 <- TF_heatmap(acts_mat, neweset)
heatmap2
dev.off()
#Step 4
Cons_net(mouse = TRUE)
plot_tfnetwork(net,
pdf.name = "TFnet.pdf",
nodeshape = "circle",
#               TF_color = "red",
#              netlayout = layout_(network, with_fr(niter = 20000)),
pdf.height = 15,
pdf.width = 15,
edge.arrow.size = 0.3,
vertex.label.family = "sans")
plot_highlighted_tfnetwork(network, highlight_node = "Gli2")
#Step 4
tfs <- Reselect_TFs_p(GSEArslt = gsearslts$GSEArslt, pval = 0.00001)
tfs
Cons_net(mouse = TRUE)
plot_tfnetwork(net,
pdf.name = "TFnet.pdf",
nodeshape = "circle",
#               TF_color = "red",
#              netlayout = layout_(network, with_fr(niter = 20000)),
pdf.height = 15,
pdf.width = 15,
edge.arrow.size = 0.3,
vertex.label.family = "sans")
plot_highlighted_tfnetwork(network, highlight_node = "Gli2")
plot_interactive_tfnetwork(network,
canvas.width = 500,
canvas.height = 500)
plot_3d_tfnetwork(network)
?plot_highlighted_tfnetwork
setwd("F:\\Desktop\\NETACT\\R package\\TFnetwork")
git init
git remote add origin https://https://github.com/PhiliJ/TFnetwork
library(devtools)
git remote add origin https://https://github.com/PhiliJ/TFnetwork
git remote add origin https://github.com/PhiliJ/TFnetwork
